From f9111d1d8bb77b3a1c4cb7b14035a3463d95cc31 Mon Sep 17 00:00:00 2001
From: wangbin <wbsecg1@gmail.com>
Date: Wed, 27 Aug 2025 11:16:40 +0800
Subject: [PATCH 35/35] nvenc: support all versions in 1 build

some options have version dependent values, e.g. rc and preset
---
 libavcodec/Makefile         |   1 +
 libavcodec/nvenc.c          |  22 +++-
 libavcodec/nvenc.h          |   5 +-
 libavcodec/nvenc_111.c      |  27 +++++
 libavcodec/nvenc_120.c      |  27 +++++
 libavcodec/nvenc_121.c      |  27 +++++
 libavcodec/nvenc_91.c       |  27 +++++
 libavcodec/nvenc_dispatch.c | 214 ++++++++++++++++++++++++++++++++++++
 8 files changed, 343 insertions(+), 7 deletions(-)
 create mode 100644 libavcodec/nvenc_111.c
 create mode 100644 libavcodec/nvenc_120.c
 create mode 100644 libavcodec/nvenc_121.c
 create mode 100644 libavcodec/nvenc_91.c
 create mode 100644 libavcodec/nvenc_dispatch.c

diff --git a/libavcodec/Makefile b/libavcodec/Makefile
index fb22541f8d..515be56fa7 100644
--- a/libavcodec/Makefile
+++ b/libavcodec/Makefile
@@ -272,6 +272,7 @@ OBJS-$(CONFIG_AV1_CUVID_DECODER)       += cuviddec.o
 OBJS-$(CONFIG_AV1_MEDIACODEC_DECODER)  += mediacodecdec.o
 OBJS-$(CONFIG_AV1_MEDIACODEC_ENCODER)  += mediacodecenc.o
 OBJS-$(CONFIG_AV1_NVENC_ENCODER)       += nvenc_av1.o nvenc.o
+OBJS-$(CONFIG_AV1_NVENC_ENCODER)       += nvenc_dispatch.o nvenc_91.o nvenc_111.o nvenc_120.o nvenc_121.o
 OBJS-$(CONFIG_AV1_QSV_ENCODER)         += qsvenc_av1.o
 OBJS-$(CONFIG_AV1_VAAPI_ENCODER)       += vaapi_encode_av1.o av1_levels.o
 OBJS-$(CONFIG_AV1_VULKAN_ENCODER)      += vulkan_encode.o vulkan_encode_av1.o \
diff --git a/libavcodec/nvenc.c b/libavcodec/nvenc.c
index e5593908ec..f3cf0c9b18 100644
--- a/libavcodec/nvenc.c
+++ b/libavcodec/nvenc.c
@@ -45,6 +45,10 @@
 #include "internal.h"
 #include "packet_internal.h"
 
+#undef CONFIG_AV1_NVENC_ENCODER
+#define CONFIG_AV1_NVENC_ENCODER (NVENCAPI_MAJOR_VERSION >= 12)
+#define FF_NVENC(f) AV_JOIN(f, AV_JOIN(NVENCAPI_MAJOR_VERSION, NVENCAPI_MINOR_VERSION))
+
 #define CHECK_CU(x) FF_CUDA_CHECK_DL(avctx, dl_fn->cuda_dl, x)
 
 #define NVENC_CAP 0x30
@@ -57,6 +61,7 @@
 #define IS_CBR(rc) (rc == NV_ENC_PARAMS_RC_CBR)
 #endif
 
+#ifndef FF_NVENC_DUP
 const enum AVPixelFormat ff_nvenc_pix_fmts[] = {
     AV_PIX_FMT_YUV420P,
     AV_PIX_FMT_NV12,
@@ -95,6 +100,7 @@ const AVCodecHWConfigInternal *const ff_nvenc_hw_configs[] = {
 #endif
     NULL,
 };
+#endif // FF_NVENC_DUP
 
 #define IS_10BIT(pix_fmt)  (pix_fmt == AV_PIX_FMT_P010         || \
                             pix_fmt == AV_PIX_FMT_P016         || \
@@ -420,14 +426,16 @@ static av_cold int nvenc_load_libraries(AVCodecContext *avctx)
     func_ver = struct_ver_rt(ctx, 2);
     av_log(avctx, AV_LOG_INFO, "Loaded Nvenc version %u.%u, max: %u.%u, build api: %u.%u. config_ver: %u\n", ctx->apiver_rt & 0xff, (ctx->apiver_rt >> 24) & 0xff, nvenc_max_major, nvenc_max_minor, NVENCAPI_MAJOR_VERSION, NVENCAPI_MINOR_VERSION, config_ver);
 
+#if 0
     if ((NVENCAPI_MAJOR_VERSION << 4 | NVENCAPI_MINOR_VERSION) > nvenc_max_ver) {
         av_log(avctx, AV_LOG_WARNING, "Driver does not support the required nvenc API version. "
                "Required: %d.%d Found: %d.%d\n",
                NVENCAPI_MAJOR_VERSION, NVENCAPI_MINOR_VERSION,
                nvenc_max_major, nvenc_max_minor);
         nvenc_print_driver_requirement(avctx, AV_LOG_WARNING);
-        //return AVERROR(ENOSYS);
+        return AVERROR(ENOSYS);
     }
+#endif
     dl_fn->nvenc_funcs.version = func_ver;
 
     err = dl_fn->nvenc_dl->NvEncodeAPICreateInstance(&dl_fn->nvenc_funcs);
@@ -2226,7 +2234,8 @@ static av_cold int nvenc_setup_extradata(AVCodecContext *avctx)
     return 0;
 }
 
-av_cold int ff_nvenc_encode_close(AVCodecContext *avctx)
+int FF_NVENC(ff_nvenc_encode_close)(AVCodecContext *avctx);
+av_cold int FF_NVENC(ff_nvenc_encode_close)(AVCodecContext *avctx)
 {
     NvencContext *ctx               = avctx->priv_data;
     NvencDynLoadFunctions *dl_fn = &ctx->nvenc_dload_funcs;
@@ -2314,7 +2323,8 @@ av_cold int ff_nvenc_encode_close(AVCodecContext *avctx)
     return 0;
 }
 
-av_cold int ff_nvenc_encode_init(AVCodecContext *avctx)
+int FF_NVENC(ff_nvenc_encode_init)(AVCodecContext *avctx);
+av_cold int FF_NVENC(ff_nvenc_encode_init)(AVCodecContext *avctx)
 {
     NvencContext *ctx = avctx->priv_data;
     int ret;
@@ -3355,7 +3365,8 @@ static int nvenc_send_frame(AVCodecContext *avctx, const AVFrame *frame)
     return 0;
 }
 
-int ff_nvenc_receive_packet(AVCodecContext *avctx, AVPacket *pkt)
+int FF_NVENC(ff_nvenc_receive_packet)(AVCodecContext *avctx, AVPacket *pkt);
+int FF_NVENC(ff_nvenc_receive_packet)(AVCodecContext *avctx, AVPacket *pkt)
 {
     NvencSurface *tmp_out_surf;
     int res, res2;
@@ -3406,7 +3417,8 @@ int ff_nvenc_receive_packet(AVCodecContext *avctx, AVPacket *pkt)
     return 0;
 }
 
-av_cold void ff_nvenc_encode_flush(AVCodecContext *avctx)
+void FF_NVENC(ff_nvenc_encode_flush)(AVCodecContext *avctx);
+av_cold void FF_NVENC(ff_nvenc_encode_flush)(AVCodecContext *avctx)
 {
     NvencContext *ctx = avctx->priv_data;
 
diff --git a/libavcodec/nvenc.h b/libavcodec/nvenc.h
index 886fcb95c6..b57937f67b 100644
--- a/libavcodec/nvenc.h
+++ b/libavcodec/nvenc.h
@@ -217,8 +217,6 @@ typedef struct NvencContext
 
     NvencDynLoadFunctions nvenc_dload_funcs;
 
-    NV_ENC_INITIALIZE_PARAMS init_encode_params;
-    NV_ENC_CONFIG encode_config;
     CUcontext cu_context;
     CUcontext cu_context_internal;
     CUstream cu_stream;
@@ -324,6 +322,9 @@ typedef struct NvencContext
     int cbr_padding;
     int multiview, multiview_supported;
     int display_sei_sent;
+
+    NV_ENC_CONFIG encode_config;                    // size: 3584
+    NV_ENC_INITIALIZE_PARAMS init_encode_params;    // size: 1800 for 12.2+, 1808 otherwise
 } NvencContext;
 
 int ff_nvenc_encode_init(AVCodecContext *avctx);
diff --git a/libavcodec/nvenc_111.c b/libavcodec/nvenc_111.c
new file mode 100644
index 0000000000..8dbbca420a
--- /dev/null
+++ b/libavcodec/nvenc_111.c
@@ -0,0 +1,27 @@
+/*
+ * H.264/HEVC/AV1 hardware encoding using nvidia nvenc
+ * Copyright (c) 2025 Wang Bin <wbsecg1 at gmail.com>
+ *
+ * This file is part of FFmpeg.
+ *
+ * FFmpeg is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * FFmpeg is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with FFmpeg; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+// include a desired version of nvEncodeAPI.h first, so nvEncodeAPI.h included in nvenc.h will be ignored
+#define FF_NVENC_DUP 1
+#if __has_include(<nv-codec-headers-11.1/include/ffnvcodec/nvEncodeAPI.h>)
+#include <nv-codec-headers-11.1/include/ffnvcodec/nvEncodeAPI.h>
+#include "nvenc.c"
+#endif
\ No newline at end of file
diff --git a/libavcodec/nvenc_120.c b/libavcodec/nvenc_120.c
new file mode 100644
index 0000000000..5f582ee627
--- /dev/null
+++ b/libavcodec/nvenc_120.c
@@ -0,0 +1,27 @@
+/*
+ * H.264/HEVC/AV1 hardware encoding using nvidia nvenc
+ * Copyright (c) 2025 Wang Bin <wbsecg1 at gmail.com>
+ *
+ * This file is part of FFmpeg.
+ *
+ * FFmpeg is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * FFmpeg is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with FFmpeg; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+// include a desired version of nvEncodeAPI.h first, so nvEncodeAPI.h included in nvenc.h will be ignored
+#define FF_NVENC_DUP 1
+#if __has_include(<nv-codec-headers-12.0/include/ffnvcodec/nvEncodeAPI.h>)
+#include <nv-codec-headers-12.0/include/ffnvcodec/nvEncodeAPI.h>
+#include "nvenc.c"
+#endif
\ No newline at end of file
diff --git a/libavcodec/nvenc_121.c b/libavcodec/nvenc_121.c
new file mode 100644
index 0000000000..4f622b536f
--- /dev/null
+++ b/libavcodec/nvenc_121.c
@@ -0,0 +1,27 @@
+/*
+ * H.264/HEVC/AV1 hardware encoding using nvidia nvenc
+ * Copyright (c) 2025 Wang Bin <wbsecg1 at gmail.com>
+ *
+ * This file is part of FFmpeg.
+ *
+ * FFmpeg is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * FFmpeg is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with FFmpeg; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+// include a desired version of nvEncodeAPI.h first, so nvEncodeAPI.h included in nvenc.h will be ignored
+#define FF_NVENC_DUP 1
+#if __has_include(<nv-codec-headers-12.1/include/ffnvcodec/nvEncodeAPI.h>)
+#include <nv-codec-headers-12.1/include/ffnvcodec/nvEncodeAPI.h>
+#include "nvenc.c"
+#endif
\ No newline at end of file
diff --git a/libavcodec/nvenc_91.c b/libavcodec/nvenc_91.c
new file mode 100644
index 0000000000..b25faef45e
--- /dev/null
+++ b/libavcodec/nvenc_91.c
@@ -0,0 +1,27 @@
+/*
+ * H.264/HEVC/AV1 hardware encoding using nvidia nvenc
+ * Copyright (c) 2025 Wang Bin <wbsecg1 at gmail.com>
+ *
+ * This file is part of FFmpeg.
+ *
+ * FFmpeg is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * FFmpeg is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with FFmpeg; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+// include a desired version of nvEncodeAPI.h first, so nvEncodeAPI.h included in nvenc.h will be ignored
+#define FF_NVENC_DUP 1
+#if __has_include(<nv-codec-headers-9.1/include/ffnvcodec/nvEncodeAPI.h>)
+#include <nv-codec-headers-9.1/include/ffnvcodec/nvEncodeAPI.h>
+#include "nvenc.c"
+#endif
\ No newline at end of file
diff --git a/libavcodec/nvenc_dispatch.c b/libavcodec/nvenc_dispatch.c
new file mode 100644
index 0000000000..9143753dce
--- /dev/null
+++ b/libavcodec/nvenc_dispatch.c
@@ -0,0 +1,214 @@
+/*
+ * H.264/HEVC/AV1 hardware encoding using nvidia nvenc
+ * Copyright (c) 2025 Wang Bin <wbsecg1 at gmail.com>
+ *
+ * This file is part of FFmpeg.
+ *
+ * FFmpeg is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * FFmpeg is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with FFmpeg; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#include "nvenc.h"
+
+/*
+ To support all version of nvEncodeAPI.h with minimal changes, we need to dispatch ff_nvenc_* to versioned functions.
+ nvenc.c is built against the latest version(13.0).
+ nvenc_111.c is built against version 11.1, which is the highest version that abi compatible with all lower versions
+ To use nvEncodeAPI.h of a lower version, e.g. 11.1, we need a copy of the header, additional cflags, and include the header
+
+ #include <nv-codec-headers11.1/include/ffnvcodec/nvEncodeAPI.h>
+
+ before nvenc.c, thus <ffnvcodec/nvEncodeAPI.h> in nvenc.h will be ignored and only the lower version will be used.
+
+ 10.0 defines a different set of preset guids, so building against 9.1 header is required.
+ preset option default value in nvenc_$codec.c is version dependent but only they are built only once, so manually setting preset
+ for version < 10.0 is required.
+ TODO: This dispatch file(at least version suffix) and other versioned nvenc_*.c should be generated by a script.
+*/
+int ff_nvenc_encode_init130(AVCodecContext *avctx);
+int ff_nvenc_encode_close130(AVCodecContext *avctx);
+int ff_nvenc_receive_packet130(AVCodecContext *avctx, AVPacket *pkt);
+void ff_nvenc_encode_flush130(AVCodecContext *avctx);
+
+int ff_nvenc_encode_init121(AVCodecContext *avctx);
+int ff_nvenc_encode_close121(AVCodecContext *avctx);
+int ff_nvenc_receive_packet121(AVCodecContext *avctx, AVPacket *pkt);
+void ff_nvenc_encode_flush121(AVCodecContext *avctx);
+
+int ff_nvenc_encode_init120(AVCodecContext *avctx);
+int ff_nvenc_encode_close120(AVCodecContext *avctx);
+int ff_nvenc_receive_packet120(AVCodecContext *avctx, AVPacket *pkt);
+void ff_nvenc_encode_flush120(AVCodecContext *avctx);
+
+int ff_nvenc_encode_init111(AVCodecContext *avctx);
+int ff_nvenc_encode_close111(AVCodecContext *avctx);
+int ff_nvenc_receive_packet111(AVCodecContext *avctx, AVPacket *pkt);
+void ff_nvenc_encode_flush111(AVCodecContext *avctx);
+
+int ff_nvenc_encode_init91(AVCodecContext *avctx);
+int ff_nvenc_encode_close91(AVCodecContext *avctx);
+int ff_nvenc_receive_packet91(AVCodecContext *avctx, AVPacket *pkt);
+void ff_nvenc_encode_flush91(AVCodecContext *avctx);
+
+#if !__has_include(<nv-codec-headers-12.1/include/ffnvcodec/nvEncodeAPI.h>)
+av_cold int ff_nvenc_encode_init121(AVCodecContext *avctx) { return AVERROR_EXTERNAL; }
+av_cold int ff_nvenc_encode_close121(AVCodecContext *avctx) { return AVERROR_EXTERNAL; }
+int ff_nvenc_receive_packet121(AVCodecContext *avctx, AVPacket *pkt) { return AVERROR_EXTERNAL; }
+av_cold void ff_nvenc_encode_flush121(AVCodecContext *avctx) {}
+#endif
+
+#if !__has_include(<nv-codec-headers-12.0/include/ffnvcodec/nvEncodeAPI.h>)
+av_cold int ff_nvenc_encode_init120(AVCodecContext *avctx) { return AVERROR_EXTERNAL; }
+av_cold int ff_nvenc_encode_close120(AVCodecContext *avctx) { return AVERROR_EXTERNAL; }
+int ff_nvenc_receive_packet120(AVCodecContext *avctx, AVPacket *pkt) { return AVERROR_EXTERNAL; }
+av_cold void ff_nvenc_encode_flush120(AVCodecContext *avctx) {}
+#endif
+
+#if !__has_include(<nv-codec-headers-11.1/include/ffnvcodec/nvEncodeAPI.h>)
+av_cold int ff_nvenc_encode_init111(AVCodecContext *avctx) { return AVERROR_EXTERNAL; }
+av_cold int ff_nvenc_encode_close111(AVCodecContext *avctx) { return AVERROR_EXTERNAL; }
+int ff_nvenc_receive_packet111(AVCodecContext *avctx, AVPacket *pkt) { return AVERROR_EXTERNAL; }
+av_cold void ff_nvenc_encode_flush111(AVCodecContext *avctx) {}
+#endif
+
+#if !__has_include(<nv-codec-headers-9.1/include/ffnvcodec/nvEncodeAPI.h>)
+av_cold int ff_nvenc_encode_init91(AVCodecContext *avctx) { return AVERROR_EXTERNAL; }
+av_cold int ff_nvenc_encode_close91(AVCodecContext *avctx) { return AVERROR_EXTERNAL; }
+int ff_nvenc_receive_packet91(AVCodecContext *avctx, AVPacket *pkt) { return AVERROR_EXTERNAL; }
+av_cold void ff_nvenc_encode_flush91(AVCodecContext *avctx) {}
+#endif
+
+static const char* nvenc_driver_requirement(float api)
+{
+    const struct {
+        float api;
+        const char* win;
+        const  char* linux;
+    } requirements[] = {
+        {13.1f, "(unknown)", "(unknown)"},
+        {13.0f, "570.0", "570.0"},
+        {12.2f, "551.76", "550.54.14"},
+        {12.1f, "531.61", "530.41.03"},
+        {12.0f, "522.25", "520.56.06"},
+        {11.1f, "471.41", "470.57.02"},
+        {11.0f, "456.71", "455.28"},
+        {10.0f, "450.51", "445.87"},
+        {9.1f,  "436.15", "435.21"},
+        {9.0f,  "418.81", "418.30"},
+        {8.2f,  "397.93", "396.24"},
+        {8.1f,  "390.77", "390.25"},
+        {8.0f,  "378.66", "378.13"},
+    };
+
+    for (int i = 0; i < FF_ARRAY_ELEMS(requirements); i++) {
+        if (requirements[i].api <= api) {
+#if defined(_WIN32) || defined(__CYGWIN__)
+            return requirements[i].win;
+#else
+            return requirements[i].linux;
+#endif
+        }
+    }
+    return "(unknown)";
+}
+
+static av_cold int nvenc_load_api(AVCodecContext *avctx)
+{
+    NvencContext *ctx            = avctx->priv_data;
+    NvencDynLoadFunctions *dl_fn = &ctx->nvenc_dload_funcs;
+    NVENCSTATUS err;
+    uint32_t nvenc_max_ver;
+    uint32_t nvenc_max_major;
+    uint32_t nvenc_max_minor;
+    int ret;
+    ret = nvenc_load_functions(&dl_fn->nvenc_dl, avctx);
+    if (ret < 0) {
+        av_log(avctx, AV_LOG_ERROR, "nvenc_load_functions error\n");
+        return ret;
+    }
+
+    err = dl_fn->nvenc_dl->NvEncodeAPIGetMaxSupportedVersion(&nvenc_max_ver);
+    if (err != NV_ENC_SUCCESS) {
+        av_log(avctx, AV_LOG_ERROR, "Failed to query nvenc max version\n");
+        return AVERROR_UNKNOWN;
+    }
+    nvenc_max_major = nvenc_max_ver >> 4;
+    nvenc_max_minor = nvenc_max_ver & 0xf;
+
+    if (ctx->apiver_req <= 0) {
+        ctx->apiver_req = nvenc_max_major + nvenc_max_minor / 10.0f;
+    }
+    if (ctx->apiver_req > nvenc_max_major + nvenc_max_minor / 10.0f) {
+        av_log(avctx, AV_LOG_ERROR, "Requested nvenc API version %.1f is not supported, the minimum required Nvidia driver is %s\n", ctx->apiver_req, nvenc_driver_requirement(ctx->apiver_req));
+        return AVERROR(ENOSYS);
+    }
+    return 0;
+}
+
+av_cold int ff_nvenc_encode_init(AVCodecContext *avctx)
+{
+    nvenc_load_api(avctx); // don't return error, a future version may be supported
+    NvencContext *ctx = avctx->priv_data;
+    if (ctx->apiver_req >= 12.2f)
+        return ff_nvenc_encode_init130(avctx);
+    if (ctx->apiver_req >= 12.1f)
+        return ff_nvenc_encode_init121(avctx);
+    if (ctx->apiver_req >= 12.0f)
+        return ff_nvenc_encode_init120(avctx);
+    if (ctx->apiver_req >= 10.0f) // preset changes
+        return ff_nvenc_encode_init111(avctx);
+    return ff_nvenc_encode_init91(avctx);
+}
+
+av_cold int ff_nvenc_encode_close(AVCodecContext *avctx)
+{
+    NvencContext *ctx = avctx->priv_data;
+    if (ctx->apiver_req >= 12.2f)
+        return ff_nvenc_encode_close130(avctx);
+    if (ctx->apiver_req >= 12.1f)
+        return ff_nvenc_encode_close121(avctx);
+    if (ctx->apiver_req >= 12.0f)
+        return ff_nvenc_encode_close120(avctx);
+    if (ctx->apiver_req >= 10.0f) // preset changes
+        return ff_nvenc_encode_close111(avctx);
+    return ff_nvenc_encode_close91(avctx);
+}
+
+int ff_nvenc_receive_packet(AVCodecContext *avctx, AVPacket *pkt)
+{
+    NvencContext *ctx = avctx->priv_data;
+    if (ctx->apiver_req >= 12.2f)
+        return ff_nvenc_receive_packet130(avctx, pkt);
+    if (ctx->apiver_req >= 12.1f)
+        return ff_nvenc_receive_packet121(avctx, pkt);
+    if (ctx->apiver_req >= 12.0f)
+        return ff_nvenc_receive_packet120(avctx, pkt);
+    if (ctx->apiver_req >= 10.0f) // preset changes
+        return ff_nvenc_receive_packet111(avctx, pkt);
+    return ff_nvenc_receive_packet91(avctx, pkt);
+}
+
+av_cold void ff_nvenc_encode_flush(AVCodecContext *avctx)
+{
+    NvencContext *ctx = avctx->priv_data;
+    if (ctx->apiver_req >= 12.2f)
+        return ff_nvenc_encode_flush130(avctx);
+    if (ctx->apiver_req >= 12.1f)
+        return ff_nvenc_encode_flush121(avctx);
+    if (ctx->apiver_req >= 12.0f)
+        return ff_nvenc_encode_flush120(avctx);
+    if (ctx->apiver_req >= 10.0f) // preset changes
+        return ff_nvenc_encode_flush111(avctx);
+    ff_nvenc_encode_flush91(avctx);
+}
\ No newline at end of file
-- 
2.51.0

